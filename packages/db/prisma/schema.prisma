// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider   = "prisma-client"
    engineType = "client"
    output     = "../src/generated"
}

model User {
    id                 String               @id
    name               String
    email              String
    emailVerified      Boolean              @default(false)
    image              String?
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @default(now()) @updatedAt

    sessions           Session[]
    accounts           Account[]
    
    OrganizationMember OrganizationMember[]

    @@unique([email])
    @@map("user")
}

model Session {
    id        String   @id
    expiresAt DateTime
    token     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
    @@index([userId])
    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime  @default(now())
    updatedAt             DateTime  @updatedAt

    @@index([userId])
    @@map("account")
}

model Verification {
    id         String   @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now()) @updatedAt

    @@map("verification")
}

model Organization {
    id   String @id @default(cuid(2))
    name String
    slug String

    // Stripe Billing
    stripeCustomerId     String? @unique @map("stripe_customer_id")
    stripeSubscriptionId String? @unique @map("stripe_subscription_id")

    subscriptionStatus SubscriptionStatus @default(TRIALING) @map("subscription_status") // "trialing", "active", "past_due", "canceled"
    trialStartedAt     DateTime?          @map("trial_started_at")
    trialEndedAt       DateTime?          @map("trial_ended_at")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    Entitlement        Entitlement[]
    UsageRecord        UsageRecord[]
    Role               Role[]
    OrganizationMember OrganizationMember[]
    Team               Team[]

    @@unique([slug])
    @@index([slug])
    @@index([stripeCustomerId])
    @@index([stripeSubscriptionId])
}

enum SubscriptionStatus {
    TRIALING
    ACTIVE
    PAST_DUE
    CANCELED
    INCOMPLETE
    UNPAID
    PAUSED
}

model Team {
    id String @id @default(cuid(2))

    name String
    slug String

    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    organizationMemberId String?
    OrganizationMember   OrganizationMember? @relation(fields: [organizationMemberId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([slug])
    @@index([organizationId])
    @@index([slug])
}

model OrganizationMember {
    id String @id @default(cuid(2))

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    roleId String
    role   Role   @relation(fields: [roleId], references: [id], onDelete: Restrict)

    scope PermissionScope @default(ORGANIZATION)
    teams Team[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Entitlement {
    id String @id @default(cuid(2))

    // From Stripe active_entitlement
    stripeEntitlementId String @unique

    // Feature lookup_key (e.g., "feature_ai_receptionist")
    lookupKey String

    // Feature ID from Stripe
    featureId String

    // Is this currently active?
    isActive Boolean @default(true)

    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    // Metadata (store limits, included usage, etc.)
    metadata Json?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([organizationId, lookupKey])
    @@index([organizationId])
    @@index([lookupKey])
}

model Role {
    id          String  @id @default(cuid(2))
    name        String
    description String?
    isSystem    Boolean @default(false)
    color       String  @default("#6B7280")

    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    OrganizationMember OrganizationMember[]

    @@unique([organizationId, name])
    @@index([organizationId])
}

enum PermissionScope {
    ORGANIZATION
    TEAM
    OWN
}

model UsageRecord {
    id String @id @default(cuid(2))

    // Meter event name (maps to Stripe meter)
    meterEvent String // "ai_call_minutes", "ai_emails", "ai_texts"

    // Quantity used
    quantity Float

    // When it happened
    timestamp DateTime @default(now())

    // Idempotency for Stripe reporting
    idempotencyKey String? @unique

    // Context
    action   String? // "inbound_call", "outbound_call", "email_sent"
    metadata Json?

    // Stripe reporting status
    reportedToStripe Boolean   @default(false)
    reportedAt       DateTime?

    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    @@index([organizationId, meterEvent])
    @@index([timestamp])
    @@index([reportedToStripe])
}